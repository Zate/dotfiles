checkVersions () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    LSB=$(which lsb_release)
    [[ -f /etc/os-release ]] && { . /etc/os-release; } || true
    [[ -f /etc/lsb-release ]] && { . /etc/lsb-release; } || true
    [[ $DISTRIB_ID == "Ubuntu" ]] && { apt-stuff; } || { echo "Not ubuntu"; }

    [[ $D_GO == true ]] && checkGo || true
    proj || true
    git_config || true
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

checkGo () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    # check if go is installed
    GO_BINARY=$(which go) || true
    # check if go is up to date
    DL_REGEX="'/dl/go([0-9\.]+)\.${OS}-${MY_ARCH}.tar.gz'"
    [[ $GO_BINARY == "" ]] && LGO="0.0.0" || LGO=$(go version | grep -oE 'go[0-9\.]+' | head -1 | sed 's/\.$//')
    RGO=$(curl -s https://go.dev/VERSION?m=text | head -1)
    DL_URL="https://go.dev/dl/${RGO}.${OS}-${MY_ARCH}.tar.gz"
    [[ ! $LGO == $RGO ]] && IGO=true || IGO=false
    [[ $IGO == false && ! $GO_BINARY == "/usr/local/go/bin/go" ]] && IGO=true || IGO=false
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

upGo () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    GO_BINARY=$(which go) || true
    # check if go is up to date
    DL_REGEX="'/dl/go([0-9\.]+)\.${OS_ARCH}.tar.gz'"
    [[ $GO_BINARY == "" ]] && LGO="0.0.0" || LGO=$(go version | grep -oE 'go[0-9\.]+' | head -1 | sed 's/\.$//')
    RGO=$(curl -s https://go.dev/VERSION?m=text | head -1)
    DL_URL="https://go.dev/dl/${RGO}.${OS_ARCH}.tar.gz"
    [[ ! $LGO == $RGO ]] && IGO=true || IGO=false
    [[ $IGO == false && ! $GO_BINARY == "/usr/local/go/bin/go" ]] && IGO=true || IGO=false
    [[ $IGO == true ]] && { curl -fsSL $DL_URL | sudo tar zxf - -C /usr/local; echo "go $RGO installed at `which go`"; } || true
    [[ $IGO == false && ! $GO_BINARY == "/usr/local/go/bin/go" ]] && curl -fsSL $DL_URL | sudo tar zxf - -C /usr/local || true
    upPath
    upGoTools
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

upPath () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    [[ ! -d "$HOME/go" ]] && mkdir -p $HOME/go || true
    [[ ! -d "$HOME/.local" ]] && mkdir -p $HOME/.local || true
    [[ -f $HOME/.local/.bash_inc ]] && { [[ $(grep -Fx 'export GOPATH=$HOME/go' $HOME/.local/.bash_inc) == "" ]] && echo 'export GOPATH=$HOME/go' > $HOME/.local/.bash_inc || true; \
        [[ $(grep -Fx 'export GOROOT=/usr/local/go' $HOME/.local/.bash_inc) == "" ]] && echo 'export GOROOT=/usr/local/go' >> $HOME/.local/.bash_inc || true; \
        [[ $(grep -Fx 'export GOBIN=$GOPATH/bin' $HOME/.local/.bash_inc) == "" ]] && echo 'export GOBIN=$GOPATH/bin' >> $HOME/.local/.bash_inc || true; \
        [[ $(grep -Fx 'export PATH=$GOPATH:$GOROOT/bin:$HOME/bin:$HOME/.local/bin:$PATH' $HOME/.local/.bash_inc) == "" ]] && echo 'export PATH=$GOPATH:$GOROOT/bin:$HOME/bin:$HOME/.local/bin:$PATH' >> $HOME/.local/.bash_inc || true; } || true
    [[ -f $HOME/.local/.bash_inc ]] && { [[ $(grep -Fx '[[ -f $HOME/.local/.bash_inc ]] && . $HOME/.local/.bash_inc' ~/.bashrc) == "" ]] && echo '[[ -f $HOME/.local/.bash_inc ]] && . $HOME/.local/.bash_inc' >> ~/.bashrc || true; } || true
    [[ -f $HOME/.local/.shell_inc ]] && { [[ $(grep -Fx '[[ -f $HOME/.local/.shell_inc ]] && . $HOME/.local/.shell_inc' ~/.bashrc) == "" ]] && echo '[[ -f $HOME/.local/.shell_inc ]] && . $HOME/.local/.shell_inc' >> ~/.bashrc || true; } || true
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

apt-stuff () {
    echo "Installing via apt-get"
    DEBIAN_FRONTEND=noninteractive
    PKGS="curl wget git apt-transport-https ca-certificates software-properties-common"
    sudo apt-get update -qq -o=Dpkg::Use-Pty=0 > /dev/null
    sudo apt-get upgrade -qq -y -o=Dpkg::Use-Pty=0 > /dev/null
    sudo apt-get -qq -y install -o=Dpkg::Use-Pty=0 $PKGS > /dev/null
}

# upTerraform () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     URL=$(wget -qO- https://www.terraform.io/downloads.html | grep -oP 'https://releases.hashicorp.com/terraform/([0-9\.]+)/terraform_([0-9\.]+)_linux_amd64.zip' | head -1)
#     [[ ! -d ~/bin ]] && mkdir -p ~/bin
#     cd ~/bin
#     wget -q --continue $URL 
#     unzip -qqou terraform_*_linux_amd64.zip
#     rm -rf terraform_*_linux_amd64.zip
#     echo "Using: `which terraform`"
#     echo "Version: `terraform version`"
#     cd $OLDPWD
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

upGoTools () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    [[ ! -d $GOPATH ]] && { echo "GOPATH not set"; return 0; } || true
    # We should find a way to check if these need to be updated before we update them.
    go install golang.org/x/tools/gopls@latest
    go install github.com/cweill/gotests/gotests@latest
    go install github.com/fatih/gomodifytags@latest
    go install github.com/josharian/impl@latest
    go install github.com/haya14busa/goplay/cmd/goplay@latest
    go install github.com/go-delve/delve/cmd/dlv@latest
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    go install golang.org/x/tools/cmd/gonew@latest
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

check_os_and_arch () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    ARCH=$(uname -m | tr '[:upper:]' '[:lower:]')
    case "${OS}" in
        linux*)
            D_OS="linux"
            MY_OS="linux"
            ;;
        darwin*)
            D_OS="macos"
            MY_OS="macos"
            ;;
        *)
            echo "Unknown operating system"
            exit 1
            ;;
    esac
    case "${ARCH}" in
        x86_64*)
            D_ARCH="amd64"
            MY_ARCH="amd64"
            ;;
        x86)
            D_ARCH="386"
            MY_ARCH="386"
            ;;
        arm6l*)
            D_ARCH="arm6l"
            MY_ARCH="arm6l"
            ;;
        arm64*)
            D_ARCH="arm64"
            MY_ARCH="arm64"
            ;;
        aarch64*)
            D_ARCH="arm64"
            MY_ARCH="arm64"
            ;;
        *)
            echo "Unknown architecture"
            exit 1
            ;;
    esac
    OS_ARCH="${OS}-${MY_ARCH}"
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}



