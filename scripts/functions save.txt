install_p10k () {
    # install powerline10k and fonts etc
    echo ""
}

install_zsh () {
    # Do magic to install oh my zsh and the nice defaults etc.
    sudo DEBIAN_FRONTEND=noninteractive apt-get -qq -y install -o=Dpkg::Use-Pty=0 zsh > /dev/null
    D_ZSH=$(which zsh) || true
}

check_docker () {
    [[ -f "/.dockerenv" ]] && echo "We are in docker"; export D_DOCK=true || true
    echo "end check_docker"
}

check_zsh () {
    echo " start check_zsh"
    D_ZSH=$(which zsh) || true
    [[ $D_ZSH == "" ]] && echo "No zsh installed, installing now."; install_zsh || true
#    [[ $D_ZSH != "" ]] && chsh -s ${D_ZSH} || true
    install_omz || true
    echo "end check_zsh"
}

install_omz () {
    echo "start install_omz"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    echo "end install_omz"
}

check_golang () {
    D_GO=$(go --version) || true
    [[ $D_GO == "" ]] && echo "Golang not found, installing now."; install_go || true

}

install_go () {
    sudo rm -rf /usr/local/go
    wget -qO- https://golang.org$( wget -qO- https://golang.org/dl/ | grep -oP '/dl/go([0-9\.]+)\.linux-amd64.tar.gz' | head -1)  | sudo tar zxf - -C /usr/local
    mkdir -p ~/go/{bin,pkg,src}
#    gopath
    go version
}

goup () {
   install_go
}

gopath () {
    echo 'export GOPATH=$HOME/go' > $ZSH/custom/golang.zsh
    echo 'export GOROOT=/usr/local/go' >> $ZSH/custom/golang.zsh
    echo 'export GOBIN=$GOPATH/bin' >> $ZSH/custom/golang.zsh
    echo 'export PATH=$GOPATH:$GOROOT/bin:$PATH' >> $ZSH/custom/golang.zsh
    source $ZSH/custom/golang.zsh
}

proj () {
    [ ! -d "$GOPATH/src/github.com/Zate/" ] && mkdir -p $GOPATH/src/github.com/Zate/
    cd $GOPATH/src/github.com/Zate/
}

utf () {
        TFV=$(wget -qO- https://www.terraform.io/downloads.html | grep -oP 'https://releases.hashicorp.com/terraform/.*_linux_amd64.zip' | sed -e 's/https:\/\/releases\.hashicorp\.com\/terraform\/\([0-9\.]\+\)\/terraform_.*/\1/g')
        cd ~/bin
        URL="https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip"
        wget -q --show-progress --continue $URL 
        unzip -qqou terraform_${TFV}_linux_amd64.zip
        echo "Using: `which terraform`"
        echo "Version: `terraform version`"
        cd $OLDPWD

}

# upCodeServer () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     curl -fsSL https://code-server.dev/install.sh | sh -s --
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# upAWS () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     pip install -U awscli --user
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }


# checkBrew () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     # check if brew is installed
#     BREW_BINARY=$(which brew) || true
#     [[ $BREW_BINARY == "" ]] && IBREW=true || IBREW=false
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# installBrew () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | $MY_SHELL -s -
#     brew tap homebrew/cask
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }

# upBrew () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     case "${MY_ARCH}" in
#         arm*)
#             echo "ARM Detected, Homebrew not supported on $MY_ARCH on $MY_OS"
#             exit 1
#             ;;
#         amd64)
#             [[ ! -f `which brew` ]] && installBrew; upBrew || true
#             brew update
#             brew upgrade
#             ;;
#         *)
#             echo "Unknown architecture"
#             exit 1
#             ;;
#     esac
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# checkGo () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     # check if go is installed
#     GO_BINARY=$(which go) || true
#     [[ $GO_BINARY == "" ]] && IGO=true; upGo; checkGo || true

#     # need to support the following OS and ARCH combinations:
#     # linux/x86-64
#     # linux/arm64
#     # linux/armv6l
#     # darwin/x86-64
#     # darwin/arm64
    
#     DL_REGEX="'/dl/go([0-9\.]+)\.${OS_ARCH}.tar.gz'"
#     LGO=$(go version | grep -oE 'go[0-9\.]+' | grep -oE '[0-9\.]+' | head -1 | sed 's/\.$//')
#     RGO=$(curl -s https://go.dev/dl/ | grep -oE ${DL_REGEX} | grep -oE 'go[0-9\.]+' | grep -oE '[0-9\.]+' | head -1 | sed 's/\.$//')
#     # if [ "$D_OS" == "linux" ]; then
#     #     RGO=$(curl -s https://go.dev/dl/ | grep -oE '/dl/go([0-9\.]+)\.linux-amd64.tar.gz' | grep -oE 'go[0-9\.]+' | grep -oE '[0-9\.]+' | head -1 | sed 's/\.$//')
#     # else
#     #     RGO=$(curl -s https://go.dev/dl/ | grep -oE '/dl/go([0-9\.]+)\.darwin-amd64.tar.gz' | grep -oE 'go[0-9\.]+' | grep -oE '[0-9\.]+' | head -1 | sed 's/\.$//')
#     # fi
#     [[ ! $LGO == $RGO ]] && IGO=true || IGO=false
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# upDocker () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"

#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# check_bash_inc
# [[ ! -d "~/bin" ]] && mkdir -p ~/bin || true
# export DEBIAN_FRONTEND=noninteractive
# PKGS="-y apt-utils software-properties-common git curl"
# [[ ! -f `which unzip` ]] && PKGS="${PKGS} unzip" || true
# [[ ! -f `which python3` ]] && PKGS="${PKGS} python3" || true
# [[ ! -f `which pip` ]] && PKGS="${PKGS} python3-pip" || true
# export PKGS
# sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq ${PKGS} < /dev/null > /dev/null
# [[ ! `which pip` == "${HOME}/bin/pip" ]] && sudo ln `which pip3` ~/bin/pip || true

upGo () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    [[ $IGO == false ]] && echo "Go needs to be installed" || go version
    
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

upGoLinux () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    # check where go is installed
    case "${GO_BINARY}" in
        /usr/local/go/*)
            echo "Go is installed in /usr/local/go/bin/go"
            ;;
        /opt/homebrew/*)
            echo "Go is installed in /opt/homebrew/bin/go"
            brew install go
            ;;
        *)
            echo "Go is installed in non standard location, installing in /usr/local/go and updating GOPATH, GOROOT, GOBIN and PATH"
            
            curl -s $RGO | sudo tar zxf - -C /usr/local
            ;;
    esac
    go version
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}


