# upCodeServer () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     curl -fsSL https://code-server.dev/install.sh | sh -s --
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# upAWS () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     pip install -U awscli --user
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

checkVersions () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    checkBrew
    checkGo

    upPath
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"

}

checkGo () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    # check if go is installed
    GO_BINARY=$(which go) || true
    [[ $GO_BINARY == "" ]] && { IGO=true; upGo; } || true
    # check if go is up to date
    DL_REGEX="/dl/go([0-9\.]+)\.$OS_ARCH.tar.gz"
    LGO=$(go version | grep -oE 'go[0-9\.]+' | grep -oE '[0-9\.]+' | head -1 | sed 's/\.$//')
    RGO=$(curl -s https://go.dev/dl/ | grep -oE ${DL_REGEX} | grep -oE 'go[0-9\.]+' | grep -oE '[0-9\.]+' | head -1 | sed 's/\.$//')
    [[ ! $LGO == $RGO ]] && { IGO=true; upGo; } || IGO=false
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

installGo () {
    [[ $D_DEBUG == true ]] && echo "start $OS $FUNCNAME"
    brew install go
    # check if go is up to date
    DL_REGEX="/dl/go([0-9\.]+)\.$OS_ARCH.tar.gz"
    LGO=$(go version | grep -oE 'go[0-9\.]+' | grep -oE '[0-9\.]+' | head -1 | sed 's/\.$//')
    RGO=$(curl -s https://go.dev/dl/ | grep -oE ${DL_REGEX} | grep -oE 'go[0-9\.]+' | grep -oE '[0-9\.]+' | head -1 | sed 's/\.$//')
    [[ ! $LGO == $RGO ]] && { echo "Problem installing go: Wanted $RGO but got $LGO"; exit 1; } || IGO=false
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

upGo () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    [[ ! $LGO == $RGO ]] && { installGo; upGo; } || IGO=false
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

checkBrew () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    # check if brew is installed
    BREW_BINARY=$(which brew) || true
    [[ $BREW_BINARY == "" ]] && IBREW=true || IBREW=false
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}

installBrew () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | $MY_SHELL -s -
    brew tap homebrew/cask
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}

upBrew () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    case "${MY_ARCH}" in
        arm*)
             [[ ! -f `which brew` ]] && installBrew; upBrew || true
            brew update
            brew upgrade
            ;;
        amd64)
            [[ ! -f `which brew` ]] && installBrew; upBrew || true
            brew update
            brew upgrade
            ;;
        *)
            echo "Unknown architecture"
            exit 1
            ;;
    esac
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
}


# upGo () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     case "${OS}" in
#         linux*)
#             upGoLinux
#             ;;
#         darwin*)
#             upGoDarwin
#             ;;
#         *)
#             echo "Unknown operating system"
#             exit 1
#             ;;
#     esac
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }



# upTerraform () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     URL=$(wget -qO- https://www.terraform.io/downloads.html | grep -oP 'https://releases.hashicorp.com/terraform/([0-9\.]+)/terraform_([0-9\.]+)_linux_amd64.zip' | head -1)
#     [[ ! -d ~/bin ]] && mkdir -p ~/bin
#     cd ~/bin
#     wget -q --continue $URL 
#     unzip -qqou terraform_*_linux_amd64.zip
#     rm -rf terraform_*_linux_amd64.zip
#     echo "Using: `which terraform`"
#     echo "Version: `terraform version`"
#     cd $OLDPWD
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# upGoTools () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     go get -u github.com/mdempsky/gocode
#     go get -u github.com/uudashr/gopkgs/v2/cmd/gopkgs
#     go get -u github.com/ramya-rao-a/go-outline
#     go get -u github.com/acroca/go-symbols
#     go get -u golang.org/x/tools/cmd/guru
#     go get -u golang.org/x/tools/cmd/gorename
#     go get -u github.com/cweill/gotests/...
#     go get -u github.com/fatih/gomodifytags
#     go get -u github.com/josharian/impl
#     go get -u github.com/davidrjenni/reftools/cmd/fillstruct
#     go get -u github.com/haya14busa/goplay/cmd/goplay
#     go get -u github.com/godoctor/godoctor
#     go get -u github.com/go-delve/delve/cmd/dlv
#     go get -u github.com/stamblerre/gocode
#     go get -u github.com/rogpeppe/godef
#     go get -u github.com/sqs/goreturns
#     go get -u golang.org/x/lint/golint
#     go get -u golang.org/x/tools/gopls
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# upDockerCompose () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     [[ ! -f `which docker-compose` ]] && pip install -U docker-compose || true
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# upBrew () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     [[ ! -f `which brew` ]] && install_brew; upBrew || true
#     brew update
#     brew upgrade
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }


# # this function formats the verbose output from terragrunt
# terragrunt () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     local action=$1
#     shift 1
#     command terragrunt $action "$@" 2>&1 | sed -E "s|$(dirname $(pwd))/||g;s|^\[terragrunt\]( [0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})* ||g;s|(\[.*\]) [0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}|\1|g"
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
# }

# install_bash_inc () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     [[ ! -d ~/.local ]] && mkdir -p ~/.local
#     [[ -f ~/.local/.bash_inc ]] && return 0 || ln -s ${PWD}/bash_inc ~/.local/.bash_inc
#     cp scripts/functions ~/.local/.functions
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }

# install_bash_rc () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     [[ ! -f ~/.bashrc ]] && ln -s ${PWD}/bashrc ~/.bashrc || echo 'source ~/.local/.bash_inc' >> ~/.bashrc
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }



# install_go () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     upGo
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }
# install_go_tools () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     upGoTools
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }
# install_aws () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     upAWS
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }
# install_terraform () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     upTerraform
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }

# git_config () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     git config --global user.name "Zate"
#     git config --global user.email "zate75@gmail.com"
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }

# install_brew () {
#     [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
#     case "${OS}" in
#         linux*)
#             echo "Linux detected, skipping brew install"
#             ;;
#         darwin*)
#             echo "Darwin detected, installing brew"
#             [[ ! -f `which brew` ]] && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || true
#             brew tap homebrew/cask
#             ;;
#     esac
#     [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
#     return 0
# }




# # install_p10k () {
# #     # install powerline10k and fonts etc
# #     echo ""
# # }

# # install_zsh () {
# #     # Do magic to install oh my zsh and the nice defaults etc.
# #     sudo DEBIAN_FRONTEND=noninteractive apt-get -qq -y install -o=Dpkg::Use-Pty=0 zsh > /dev/null
# #     D_ZSH=$(which zsh) || true
# # }

# # check_docker () {
# #     [[ -f "/.dockerenv" ]] && echo "We are in docker"; export D_DOCK=true || true
# #     echo "end check_docker"
# # }

# # check_zsh () {
# #     echo " start check_zsh"
# #     D_ZSH=$(which zsh) || true
# #     [[ $D_ZSH == "" ]] && echo "No zsh installed, installing now."; install_zsh || true
# # #    [[ $D_ZSH != "" ]] && chsh -s ${D_ZSH} || true
# #     install_omz || true
# #     echo "end check_zsh"
# # }

# # install_omz () {
# #     echo "start install_omz"
# #     sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
# #     echo "end install_omz"
# # }

# # install_p10k () {
# #     # install powerline10k and fonts etc
# #     echo ""
# # }

# # install_zsh () {
# #     # Do magic to install oh my zsh and the nice defaults etc.
# #     sudo DEBIAN_FRONTEND=noninteractive apt-get -qq -y install -o=Dpkg::Use-Pty=0 zsh > /dev/null
# #     D_ZSH=$(which zsh) || true
# # }



# # check_zsh () {
# #     echo " start check_zsh"
# #     D_ZSH=$(which zsh) || true
# #     [[ $D_ZSH == "" ]] && echo "No zsh installed, installing now."; install_zsh || true
# # #    [[ $D_ZSH != "" ]] && chsh -s ${D_ZSH} || true
# #     install_omz || true
# #     echo "end check_zsh"
# # }

# # install_omz () {
# #     echo "start install_omz"
# #     sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
# #     echo "end install_omz"
# # }

# # check_golang () {
# #     D_GO=$(go --version) || true
# #     [[ $D_GO == "" ]] && echo "Golang not found, installing now."; install_go || true

# # }

# # install_go () {
# #     sudo rm -rf /usr/local/go
# #     wget -qO- https://golang.org$( wget -qO- https://golang.org/dl/ | grep -oP '/dl/go([0-9\.]+)\.linux-amd64.tar.gz' | head -1)  | sudo tar zxf - -C /usr/local
# #     mkdir -p ~/go/{bin,pkg,src}
# # #    gopath
# #     go version
# # }

# # goup () {
# #    install_go
# # }

# # gopath () {
# #     echo 'export GOPATH=$HOME/go' > $ZSH/custom/golang.zsh
# #     echo 'export GOROOT=/usr/local/go' >> $ZSH/custom/golang.zsh
# #     echo 'export GOBIN=$GOPATH/bin' >> $ZSH/custom/golang.zsh
# #     echo 'export PATH=$GOPATH:$GOROOT/bin:$PATH' >> $ZSH/custom/golang.zsh
# #     source $ZSH/custom/golang.zsh
# # }

# # proj () {
# #     [ ! -d "$GOPATH/src/github.com/Zate/" ] && mkdir -p $GOPATH/src/github.com/Zate/
# #     cd $GOPATH/src/github.com/Zate/
# # }

# # utf () {
# #         TFV=$(wget -qO- https://www.terraform.io/downloads.html | grep -oP 'https://releases.hashicorp.com/terraform/.*_linux_amd64.zip' | sed -e 's/https:\/\/releases\.hashicorp\.com\/terraform\/\([0-9\.]\+\)\/terraform_.*/\1/g')
# #         cd ~/bin
# #         URL="https://releases.hashicorp.com/terraform/${TFV}/terraform_${TFV}_linux_amd64.zip"
# #         wget -q --show-progress --continue $URL 
# #         unzip -qqou terraform_${TFV}_linux_amd64.zip
# #         echo "Using: `which terraform`"
# #         echo "Version: `terraform version`"
# #         cd $OLDPWD

# # }

# [[ -f ~/.local/.functions ]] && source ~/.local/.functions || true

# # export GOPATH=$HOME/go
# # export GOROOT=/usr/local/go
# # export GOBIN=$GOPATH/bin
# # export PATH=$GOPATH:$GOROOT/bin:$HOME/bin:$HOME/.local/bin:$PATH
