#!/usr/bin/env bash

unset_d () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    D_SHELLINC=false
    D_CHROMEOS=false
    D_MACOS=false
    D_GO=false
    D_LXD=false
    D_ZSH=false
    D_SHELL="bash"
    D_OS="debian"
    PKGS=""
    DEBIAN_FRONTEND=""
    MY_SHELL="/bin/bash"
    SHELL_RC=".bashrc"
    MY_OS="linux"
    OS="linux"
    ARCH="amd64"
    OS_ARCH="linux-amd64"
    DOCLEAN=false
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}

check_env () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    [[ -f "/.dockerenv" ]] && export D_DOCKER=true || true
    [[ -d "/mnt/chromeos" ]] && export D_CHROMEOS=true || true
    [[ -d "/dev/lxd" ]] && export D_LXD=true || true
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}

check_shell_inc () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    [[ -f "/.local/.shell_inc" ]] && export D_SHELLINC=true || true
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}

check_shell () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    case "$SHELL" in
        */bash)
            SHELL_TYPE="bash"
            MY_SHELL=$SHELL || true
            D_BASH=true || true
            D_SHELL="bash" || true
            SHELL_RC=".bashrc"
            [[ -f "shell/bash/functions" ]] && source shell/bash/functions || true
            ;;
        */zsh)
            SHELL_TYPE="zsh"
            MY_SHELL=$SHELL || true
            D_ZSH=true || true
            D_SHELL="zsh" || true
            SHELL_RC=".zshrc"
            [[ -f "shell/zsh/functions" ]] && source shell/zsh/functions || true
            ;;
        *)
            echo "Unknown shell"
            exit 1
            ;;
    esac
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}

check_os_and_arch () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    ARCH=$(uname -m | tr '[:upper:]' '[:lower:]')
    case "${OS}" in
        linux*)
            D_OS="linux"
            MY_OS="linux"
            ;;
        darwin*)
            D_OS="macos"
            MY_OS="macos"
            ;;
        *)
            echo "Unknown operating system"
            exit 1
            ;;
    esac
    case "${ARCH}" in
        x86_64*)
            D_ARCH="amd64"
            MY_ARCH="amd64"
            ;;
        x86)
            D_ARCH="386"
            MY_ARCH="386"
            ;;
        arm6l*)
            D_ARCH="arm6l"
            MY_ARCH="arm6l"
            ;;
        arm64*)
            D_ARCH="arm64"
            MY_ARCH="arm64"
            ;;
        aarch64*)
            D_ARCH="arm64"
            MY_ARCH="arm64"
            ;;
        *)
            echo "Unknown architecture"
            exit 1
            ;;
    esac
    OS_ARCH="${OS}-${MY_ARCH}"
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}

skel_function () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    [[ "true" == "true" ]] && true || false
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}

check_prereqs () {
    [[ $D_DEBUG == true ]] && echo "start $FUNCNAME"
    check_os_and_arch
    check_env
    check_shell
    [[ $D_DEBUG == true ]] && echo "end $FUNCNAME"
    return 0
}

debug_output () {
    echo "D_DEBUG: $D_DEBUG"
    echo "D_BASHINC: $D_BASHINC"
    echo "D_CHROMEOS: $D_CHROMEOS"
    echo "D_MACOS: $D_MACOS"
    echo "D_GO: $D_GO"
    echo "D_LXD: $D_LXD"
    echo "D_ZSH: $D_ZSH"
    echo "D_SHELL: $D_SHELL"
    echo "D_OS: $D_OS"
    echo "PKGS: $PKGS"
    echo "DEBIAN_FRONTEND: $DEBIAN_FRONTEND"
    echo "MY_SHELL: $MY_SHELL"
    echo "MY_OS: $MY_OS"
    echo "OS: $OS"
    echo "ARCH: $ARCH"
    echo "OS_ARCH: $OS_ARCH"
    return 0
}

